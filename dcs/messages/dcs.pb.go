// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: dcs.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// for use in other messages only
type ChunkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Hosts    []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Position int64    `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ChunkInfo) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ChunkInfo) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// for use in other messages only
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	SpaceAval int64  `protobuf:"varint,2,opt,name=space_aval,json=spaceAval,proto3" json:"space_aval,omitempty"`
	Processed int64  `protobuf:"varint,3,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{1}
}

func (x *NodeInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *NodeInfo) GetSpaceAval() int64 {
	if x != nil {
		return x.SpaceAval
	}
	return 0
}

func (x *NodeInfo) GetProcessed() int64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

// wrapper of wrappers
type Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*Wrapper_ClientController
	//	*Wrapper_ClientStorage
	//	*Wrapper_HeartBeat
	//	*Wrapper_Replicate
	//	*Wrapper_NodeCollapse
	//	*Wrapper_ReplicateRequest
	//	*Wrapper_Delete
	Msg isWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *Wrapper) Reset() {
	*x = Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrapper) ProtoMessage() {}

func (x *Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrapper.ProtoReflect.Descriptor instead.
func (*Wrapper) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{2}
}

func (m *Wrapper) GetMsg() isWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Wrapper) GetClientController() *C2C {
	if x, ok := x.GetMsg().(*Wrapper_ClientController); ok {
		return x.ClientController
	}
	return nil
}

func (x *Wrapper) GetClientStorage() *C2S {
	if x, ok := x.GetMsg().(*Wrapper_ClientStorage); ok {
		return x.ClientStorage
	}
	return nil
}

func (x *Wrapper) GetHeartBeat() *Beat {
	if x, ok := x.GetMsg().(*Wrapper_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *Wrapper) GetReplicate() *Replicate {
	if x, ok := x.GetMsg().(*Wrapper_Replicate); ok {
		return x.Replicate
	}
	return nil
}

func (x *Wrapper) GetNodeCollapse() *NodeCollapse {
	if x, ok := x.GetMsg().(*Wrapper_NodeCollapse); ok {
		return x.NodeCollapse
	}
	return nil
}

func (x *Wrapper) GetReplicateRequest() *ReplicateRequest {
	if x, ok := x.GetMsg().(*Wrapper_ReplicateRequest); ok {
		return x.ReplicateRequest
	}
	return nil
}

func (x *Wrapper) GetDelete() *Delete {
	if x, ok := x.GetMsg().(*Wrapper_Delete); ok {
		return x.Delete
	}
	return nil
}

type isWrapper_Msg interface {
	isWrapper_Msg()
}

type Wrapper_ClientController struct {
	ClientController *C2C `protobuf:"bytes,1,opt,name=client_controller,json=clientController,proto3,oneof"`
}

type Wrapper_ClientStorage struct {
	ClientStorage *C2S `protobuf:"bytes,2,opt,name=client_storage,json=clientStorage,proto3,oneof"`
}

type Wrapper_HeartBeat struct {
	HeartBeat *Beat `protobuf:"bytes,3,opt,name=heart_beat,json=heartBeat,proto3,oneof"`
}

type Wrapper_Replicate struct {
	Replicate *Replicate `protobuf:"bytes,4,opt,name=replicate,proto3,oneof"`
}

type Wrapper_NodeCollapse struct {
	NodeCollapse *NodeCollapse `protobuf:"bytes,5,opt,name=node_collapse,json=nodeCollapse,proto3,oneof"`
}

type Wrapper_ReplicateRequest struct {
	ReplicateRequest *ReplicateRequest `protobuf:"bytes,6,opt,name=replicate_request,json=replicateRequest,proto3,oneof"`
}

type Wrapper_Delete struct {
	Delete *Delete `protobuf:"bytes,7,opt,name=delete,proto3,oneof"`
}

func (*Wrapper_ClientController) isWrapper_Msg() {}

func (*Wrapper_ClientStorage) isWrapper_Msg() {}

func (*Wrapper_HeartBeat) isWrapper_Msg() {}

func (*Wrapper_Replicate) isWrapper_Msg() {}

func (*Wrapper_NodeCollapse) isWrapper_Msg() {}

func (*Wrapper_ReplicateRequest) isWrapper_Msg() {}

func (*Wrapper_Delete) isWrapper_Msg() {}

// called by client to store a file
type StorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Size     int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Chunk    string `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Position int64  `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *StorageRequest) Reset() {
	*x = StorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRequest) ProtoMessage() {}

func (x *StorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRequest.ProtoReflect.Descriptor instead.
func (*StorageRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{3}
}

func (x *StorageRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StorageRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *StorageRequest) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *StorageRequest) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// response from controller for put request
type StorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Okay     bool   `protobuf:"varint,1,opt,name=okay,proto3" json:"okay,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	RepHost1 string `protobuf:"bytes,3,opt,name=repHost1,proto3" json:"repHost1,omitempty"`
	RepHost2 string `protobuf:"bytes,4,opt,name=repHost2,proto3" json:"repHost2,omitempty"`
}

func (x *StorageResponse) Reset() {
	*x = StorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageResponse) ProtoMessage() {}

func (x *StorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageResponse.ProtoReflect.Descriptor instead.
func (*StorageResponse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{4}
}

func (x *StorageResponse) GetOkay() bool {
	if x != nil {
		return x.Okay
	}
	return false
}

func (x *StorageResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StorageResponse) GetRepHost1() string {
	if x != nil {
		return x.RepHost1
	}
	return ""
}

func (x *StorageResponse) GetRepHost2() string {
	if x != nil {
		return x.RepHost2
	}
	return ""
}

// called by client to retrieve a file
type RetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *RetrieveRequest) Reset() {
	*x = RetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRequest) ProtoMessage() {}

func (x *RetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{5}
}

func (x *RetrieveRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// response from controller with where to get the data
type RetrieveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size   int64                 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Chunks map[string]*ChunkInfo `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RetrieveResponse) Reset() {
	*x = RetrieveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveResponse) ProtoMessage() {}

func (x *RetrieveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveResponse.ProtoReflect.Descriptor instead.
func (*RetrieveResponse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RetrieveResponse) GetChunks() map[string]*ChunkInfo {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// request list of all file names
type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{7}
}

// lists all files stored currently
type ListFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename []string `protobuf:"bytes,1,rep,name=filename,proto3" json:"filename,omitempty"`
}

func (x *ListFiles) Reset() {
	*x = ListFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFiles) ProtoMessage() {}

func (x *ListFiles) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFiles.ProtoReflect.Descriptor instead.
func (*ListFiles) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{8}
}

func (x *ListFiles) GetFilename() []string {
	if x != nil {
		return x.Filename
	}
	return nil
}

// delete a file
type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *Delete) Reset() {
	*x = Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{9}
}

func (x *Delete) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// request list of all nodes and their metadata
type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{10}
}

// lists all nodes and their metadata
type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeInfo `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{11}
}

func (x *ListNodesResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type C2C struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*C2C_StorageRequest
	//	*C2C_RetrieveRequest
	//	*C2C_StorageResponse
	//	*C2C_RetrieveResponse
	//	*C2C_ListRequest
	//	*C2C_ListFiles
	//	*C2C_ListNodesRequest
	//	*C2C_ListNodesReponse
	Msg isC2C_Msg `protobuf_oneof:"msg"`
}

func (x *C2C) Reset() {
	*x = C2C{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2C) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2C) ProtoMessage() {}

func (x *C2C) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2C.ProtoReflect.Descriptor instead.
func (*C2C) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{12}
}

func (m *C2C) GetMsg() isC2C_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *C2C) GetStorageRequest() *StorageRequest {
	if x, ok := x.GetMsg().(*C2C_StorageRequest); ok {
		return x.StorageRequest
	}
	return nil
}

func (x *C2C) GetRetrieveRequest() *RetrieveRequest {
	if x, ok := x.GetMsg().(*C2C_RetrieveRequest); ok {
		return x.RetrieveRequest
	}
	return nil
}

func (x *C2C) GetStorageResponse() *StorageResponse {
	if x, ok := x.GetMsg().(*C2C_StorageResponse); ok {
		return x.StorageResponse
	}
	return nil
}

func (x *C2C) GetRetrieveResponse() *RetrieveResponse {
	if x, ok := x.GetMsg().(*C2C_RetrieveResponse); ok {
		return x.RetrieveResponse
	}
	return nil
}

func (x *C2C) GetListRequest() *ListRequest {
	if x, ok := x.GetMsg().(*C2C_ListRequest); ok {
		return x.ListRequest
	}
	return nil
}

func (x *C2C) GetListFiles() *ListFiles {
	if x, ok := x.GetMsg().(*C2C_ListFiles); ok {
		return x.ListFiles
	}
	return nil
}

func (x *C2C) GetListNodesRequest() *ListNodesRequest {
	if x, ok := x.GetMsg().(*C2C_ListNodesRequest); ok {
		return x.ListNodesRequest
	}
	return nil
}

func (x *C2C) GetListNodesReponse() *ListNodesResponse {
	if x, ok := x.GetMsg().(*C2C_ListNodesReponse); ok {
		return x.ListNodesReponse
	}
	return nil
}

type isC2C_Msg interface {
	isC2C_Msg()
}

type C2C_StorageRequest struct {
	StorageRequest *StorageRequest `protobuf:"bytes,1,opt,name=storage_request,json=storageRequest,proto3,oneof"`
}

type C2C_RetrieveRequest struct {
	RetrieveRequest *RetrieveRequest `protobuf:"bytes,2,opt,name=retrieve_request,json=retrieveRequest,proto3,oneof"`
}

type C2C_StorageResponse struct {
	StorageResponse *StorageResponse `protobuf:"bytes,3,opt,name=storage_response,json=storageResponse,proto3,oneof"`
}

type C2C_RetrieveResponse struct {
	RetrieveResponse *RetrieveResponse `protobuf:"bytes,4,opt,name=retrieve_response,json=retrieveResponse,proto3,oneof"`
}

type C2C_ListRequest struct {
	ListRequest *ListRequest `protobuf:"bytes,5,opt,name=list_request,json=listRequest,proto3,oneof"`
}

type C2C_ListFiles struct {
	ListFiles *ListFiles `protobuf:"bytes,6,opt,name=list_files,json=listFiles,proto3,oneof"`
}

type C2C_ListNodesRequest struct {
	ListNodesRequest *ListNodesRequest `protobuf:"bytes,8,opt,name=list_nodes_request,json=listNodesRequest,proto3,oneof"`
}

type C2C_ListNodesReponse struct {
	ListNodesReponse *ListNodesResponse `protobuf:"bytes,9,opt,name=list_nodes_reponse,json=listNodesReponse,proto3,oneof"`
}

func (*C2C_StorageRequest) isC2C_Msg() {}

func (*C2C_RetrieveRequest) isC2C_Msg() {}

func (*C2C_StorageResponse) isC2C_Msg() {}

func (*C2C_RetrieveResponse) isC2C_Msg() {}

func (*C2C_ListRequest) isC2C_Msg() {}

func (*C2C_ListFiles) isC2C_Msg() {}

func (*C2C_ListNodesRequest) isC2C_Msg() {}

func (*C2C_ListNodesReponse) isC2C_Msg() {}

// store a chunk
type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Chunk    string `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	RepHost1 string `protobuf:"bytes,3,opt,name=repHost1,proto3" json:"repHost1,omitempty"`
	RepHost2 string `protobuf:"bytes,4,opt,name=repHost2,proto3" json:"repHost2,omitempty"`
	Data     []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{13}
}

func (x *PutRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PutRequest) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *PutRequest) GetRepHost1() string {
	if x != nil {
		return x.RepHost1
	}
	return ""
}

func (x *PutRequest) GetRepHost2() string {
	if x != nil {
		return x.RepHost2
	}
	return ""
}

func (x *PutRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// response to storing a chunk
type PutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Okay bool `protobuf:"varint,1,opt,name=okay,proto3" json:"okay,omitempty"`
}

func (x *PutResponse) Reset() {
	*x = PutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResponse) ProtoMessage() {}

func (x *PutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResponse.ProtoReflect.Descriptor instead.
func (*PutResponse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{14}
}

func (x *PutResponse) GetOkay() bool {
	if x != nil {
		return x.Okay
	}
	return false
}

// retrieve a chunk
type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk string `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{15}
}

func (x *GetRequest) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

// response to retrieving a chunk
type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{16}
}

func (x *GetResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type C2S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*C2S_PutRequest
	//	*C2S_GetRequest
	//	*C2S_PutResponse
	//	*C2S_GetResponse
	Msg isC2S_Msg `protobuf_oneof:"msg"`
}

func (x *C2S) Reset() {
	*x = C2S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S) ProtoMessage() {}

func (x *C2S) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S.ProtoReflect.Descriptor instead.
func (*C2S) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{17}
}

func (m *C2S) GetMsg() isC2S_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *C2S) GetPutRequest() *PutRequest {
	if x, ok := x.GetMsg().(*C2S_PutRequest); ok {
		return x.PutRequest
	}
	return nil
}

func (x *C2S) GetGetRequest() *GetRequest {
	if x, ok := x.GetMsg().(*C2S_GetRequest); ok {
		return x.GetRequest
	}
	return nil
}

func (x *C2S) GetPutResponse() *PutResponse {
	if x, ok := x.GetMsg().(*C2S_PutResponse); ok {
		return x.PutResponse
	}
	return nil
}

func (x *C2S) GetGetResponse() *GetResponse {
	if x, ok := x.GetMsg().(*C2S_GetResponse); ok {
		return x.GetResponse
	}
	return nil
}

type isC2S_Msg interface {
	isC2S_Msg()
}

type C2S_PutRequest struct {
	PutRequest *PutRequest `protobuf:"bytes,1,opt,name=put_request,json=putRequest,proto3,oneof"`
}

type C2S_GetRequest struct {
	GetRequest *GetRequest `protobuf:"bytes,2,opt,name=get_request,json=getRequest,proto3,oneof"`
}

type C2S_PutResponse struct {
	PutResponse *PutResponse `protobuf:"bytes,3,opt,name=put_response,json=putResponse,proto3,oneof"`
}

type C2S_GetResponse struct {
	GetResponse *GetResponse `protobuf:"bytes,4,opt,name=get_response,json=getResponse,proto3,oneof"`
}

func (*C2S_PutRequest) isC2S_Msg() {}

func (*C2S_GetRequest) isC2S_Msg() {}

func (*C2S_PutResponse) isC2S_Msg() {}

func (*C2S_GetResponse) isC2S_Msg() {}

// sent from storage node to controller as heart beat
type Thump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodeid    int64 `protobuf:"varint,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	Space     int64 `protobuf:"varint,2,opt,name=space,proto3" json:"space,omitempty"`
	Processed int64 `protobuf:"varint,3,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *Thump) Reset() {
	*x = Thump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thump) ProtoMessage() {}

func (x *Thump) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thump.ProtoReflect.Descriptor instead.
func (*Thump) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{18}
}

func (x *Thump) GetNodeid() int64 {
	if x != nil {
		return x.Nodeid
	}
	return 0
}

func (x *Thump) GetSpace() int64 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *Thump) GetProcessed() int64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

// sent from controller to storage node to as a response to connect/heart beat
type Bump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Okay   bool  `protobuf:"varint,1,opt,name=okay,proto3" json:"okay,omitempty"`
	Nodeid int64 `protobuf:"varint,2,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
}

func (x *Bump) Reset() {
	*x = Bump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bump) ProtoMessage() {}

func (x *Bump) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bump.ProtoReflect.Descriptor instead.
func (*Bump) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{19}
}

func (x *Bump) GetOkay() bool {
	if x != nil {
		return x.Okay
	}
	return false
}

func (x *Bump) GetNodeid() int64 {
	if x != nil {
		return x.Nodeid
	}
	return 0
}

// sent from storage node to controller to request to be added to the system
type Connect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Space int64  `protobuf:"varint,1,opt,name=space,proto3" json:"space,omitempty"`
	Host  string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *Connect) Reset() {
	*x = Connect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connect) ProtoMessage() {}

func (x *Connect) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connect.ProtoReflect.Descriptor instead.
func (*Connect) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{20}
}

func (x *Connect) GetSpace() int64 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *Connect) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// request a host to get a chunk that was corrupted
type ChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	ChunkId string `protobuf:"bytes,2,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{21}
}

func (x *ChunkRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

// host that has non corrupted chunk
type ChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *ChunkResponse) Reset() {
	*x = ChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkResponse) ProtoMessage() {}

func (x *ChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkResponse.ProtoReflect.Descriptor instead.
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{22}
}

func (x *ChunkResponse) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// begins the mapping phase of distributed computation
type Execute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks   []string `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	JobName  string   `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Method   string   `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Reducers []string `protobuf:"bytes,4,rep,name=reducers,proto3" json:"reducers,omitempty"`
}

func (x *Execute) Reset() {
	*x = Execute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Execute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Execute) ProtoMessage() {}

func (x *Execute) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Execute.ProtoReflect.Descriptor instead.
func (*Execute) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{23}
}

func (x *Execute) GetChunks() []string {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *Execute) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *Execute) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Execute) GetReducers() []string {
	if x != nil {
		return x.Reducers
	}
	return nil
}

// sent from mapper to reducer
type Reduce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	JobName string `protobuf:"bytes,3,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Method  string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Reduce) Reset() {
	*x = Reduce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reduce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reduce) ProtoMessage() {}

func (x *Reduce) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reduce.ProtoReflect.Descriptor instead.
func (*Reduce) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{24}
}

func (x *Reduce) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Reduce) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Reduce) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *Reduce) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// results sent from storage node to computation manager
type Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	JobName string `protobuf:"bytes,3,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Method  string `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Results) Reset() {
	*x = Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Results) ProtoMessage() {}

func (x *Results) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Results.ProtoReflect.Descriptor instead.
func (*Results) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{25}
}

func (x *Results) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Results) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Results) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *Results) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// report from node to computational manager
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportType int64  `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	Method     string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{26}
}

func (x *Report) GetReportType() int64 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *Report) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type Beat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*Beat_ThumpMessage
	//	*Beat_BumpMessage
	//	*Beat_ConnectMessage
	//	*Beat_ChunkRequest
	//	*Beat_ChunkReponse
	//	*Beat_Execute
	//	*Beat_Reduce
	//	*Beat_Results
	//	*Beat_Report
	Msg isBeat_Msg `protobuf_oneof:"msg"`
}

func (x *Beat) Reset() {
	*x = Beat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Beat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Beat) ProtoMessage() {}

func (x *Beat) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Beat.ProtoReflect.Descriptor instead.
func (*Beat) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{27}
}

func (m *Beat) GetMsg() isBeat_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Beat) GetThumpMessage() *Thump {
	if x, ok := x.GetMsg().(*Beat_ThumpMessage); ok {
		return x.ThumpMessage
	}
	return nil
}

func (x *Beat) GetBumpMessage() *Bump {
	if x, ok := x.GetMsg().(*Beat_BumpMessage); ok {
		return x.BumpMessage
	}
	return nil
}

func (x *Beat) GetConnectMessage() *Connect {
	if x, ok := x.GetMsg().(*Beat_ConnectMessage); ok {
		return x.ConnectMessage
	}
	return nil
}

func (x *Beat) GetChunkRequest() *ChunkRequest {
	if x, ok := x.GetMsg().(*Beat_ChunkRequest); ok {
		return x.ChunkRequest
	}
	return nil
}

func (x *Beat) GetChunkReponse() *ChunkResponse {
	if x, ok := x.GetMsg().(*Beat_ChunkReponse); ok {
		return x.ChunkReponse
	}
	return nil
}

func (x *Beat) GetExecute() *Execute {
	if x, ok := x.GetMsg().(*Beat_Execute); ok {
		return x.Execute
	}
	return nil
}

func (x *Beat) GetReduce() *Reduce {
	if x, ok := x.GetMsg().(*Beat_Reduce); ok {
		return x.Reduce
	}
	return nil
}

func (x *Beat) GetResults() *Results {
	if x, ok := x.GetMsg().(*Beat_Results); ok {
		return x.Results
	}
	return nil
}

func (x *Beat) GetReport() *Report {
	if x, ok := x.GetMsg().(*Beat_Report); ok {
		return x.Report
	}
	return nil
}

type isBeat_Msg interface {
	isBeat_Msg()
}

type Beat_ThumpMessage struct {
	ThumpMessage *Thump `protobuf:"bytes,1,opt,name=thump_message,json=thumpMessage,proto3,oneof"`
}

type Beat_BumpMessage struct {
	BumpMessage *Bump `protobuf:"bytes,2,opt,name=bump_message,json=bumpMessage,proto3,oneof"`
}

type Beat_ConnectMessage struct {
	ConnectMessage *Connect `protobuf:"bytes,3,opt,name=connect_message,json=connectMessage,proto3,oneof"`
}

type Beat_ChunkRequest struct {
	ChunkRequest *ChunkRequest `protobuf:"bytes,4,opt,name=chunk_request,json=chunkRequest,proto3,oneof"`
}

type Beat_ChunkReponse struct {
	ChunkReponse *ChunkResponse `protobuf:"bytes,5,opt,name=chunk_reponse,json=chunkReponse,proto3,oneof"`
}

type Beat_Execute struct {
	Execute *Execute `protobuf:"bytes,6,opt,name=execute,proto3,oneof"`
}

type Beat_Reduce struct {
	Reduce *Reduce `protobuf:"bytes,7,opt,name=reduce,proto3,oneof"`
}

type Beat_Results struct {
	Results *Results `protobuf:"bytes,8,opt,name=results,proto3,oneof"`
}

type Beat_Report struct {
	Report *Report `protobuf:"bytes,9,opt,name=report,proto3,oneof"`
}

func (*Beat_ThumpMessage) isBeat_Msg() {}

func (*Beat_BumpMessage) isBeat_Msg() {}

func (*Beat_ConnectMessage) isBeat_Msg() {}

func (*Beat_ChunkRequest) isBeat_Msg() {}

func (*Beat_ChunkReponse) isBeat_Msg() {}

func (*Beat_Execute) isBeat_Msg() {}

func (*Beat_Reduce) isBeat_Msg() {}

func (*Beat_Results) isBeat_Msg() {}

func (*Beat_Report) isBeat_Msg() {}

type ReplicateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (x *ReplicateRequest) Reset() {
	*x = ReplicateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateRequest) ProtoMessage() {}

func (x *ReplicateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateRequest.ProtoReflect.Descriptor instead.
func (*ReplicateRequest) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{28}
}

func (x *ReplicateRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

// storage node to storage node
type Replicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Replicate) Reset() {
	*x = Replicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replicate) ProtoMessage() {}

func (x *Replicate) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replicate.ProtoReflect.Descriptor instead.
func (*Replicate) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{29}
}

func (x *Replicate) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *Replicate) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type NodeCollapse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk   string `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	NewHost string `protobuf:"bytes,2,opt,name=new_host,json=newHost,proto3" json:"new_host,omitempty"`
}

func (x *NodeCollapse) Reset() {
	*x = NodeCollapse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCollapse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCollapse) ProtoMessage() {}

func (x *NodeCollapse) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCollapse.ProtoReflect.Descriptor instead.
func (*NodeCollapse) Descriptor() ([]byte, []int) {
	return file_dcs_proto_rawDescGZIP(), []int{30}
}

func (x *NodeCollapse) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *NodeCollapse) GetNewHost() string {
	if x != nil {
		return x.NewHost
	}
	return ""
}

var File_dcs_proto protoreflect.FileDescriptor

var file_dcs_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x09, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x07,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x04, 0x2e, 0x43, 0x32, 0x43, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x43, 0x32, 0x53, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x72, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6b, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x6b, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x31, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x32, 0x22, 0x2d, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x45, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0d,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x34, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xef, 0x03, 0x0a, 0x03, 0x43, 0x32, 0x43, 0x12, 0x3a,
	0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x31, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x31, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x21, 0x0a,
	0x0b, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x6b, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x6b, 0x61, 0x79,
	0x22, 0x22, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x22, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd2, 0x01, 0x0a, 0x03,
	0x43, 0x32, 0x53, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x53, 0x0a, 0x05, 0x54, 0x68, 0x75, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x04, 0x42, 0x75, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x6b, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x6b, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x3d,
	0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x23, 0x0a,
	0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x22, 0x70, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x73, 0x22, 0x63, 0x0a, 0x06, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x64, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0x41, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x04, 0x42, 0x65, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x74,
	0x68, 0x75, 0x6d, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x68,
	0x75, 0x6d, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x62, 0x75,
	0x6d, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x42, 0x75, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x75, 0x6d, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0d, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x06, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x2d, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x0c, 0x5a,
	0x0a, 0x2e, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_dcs_proto_rawDescOnce sync.Once
	file_dcs_proto_rawDescData = file_dcs_proto_rawDesc
)

func file_dcs_proto_rawDescGZIP() []byte {
	file_dcs_proto_rawDescOnce.Do(func() {
		file_dcs_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_proto_rawDescData)
	})
	return file_dcs_proto_rawDescData
}

var file_dcs_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_dcs_proto_goTypes = []interface{}{
	(*ChunkInfo)(nil),         // 0: ChunkInfo
	(*NodeInfo)(nil),          // 1: NodeInfo
	(*Wrapper)(nil),           // 2: Wrapper
	(*StorageRequest)(nil),    // 3: StorageRequest
	(*StorageResponse)(nil),   // 4: StorageResponse
	(*RetrieveRequest)(nil),   // 5: RetrieveRequest
	(*RetrieveResponse)(nil),  // 6: RetrieveResponse
	(*ListRequest)(nil),       // 7: ListRequest
	(*ListFiles)(nil),         // 8: ListFiles
	(*Delete)(nil),            // 9: Delete
	(*ListNodesRequest)(nil),  // 10: ListNodesRequest
	(*ListNodesResponse)(nil), // 11: ListNodesResponse
	(*C2C)(nil),               // 12: C2C
	(*PutRequest)(nil),        // 13: PutRequest
	(*PutResponse)(nil),       // 14: PutResponse
	(*GetRequest)(nil),        // 15: GetRequest
	(*GetResponse)(nil),       // 16: GetResponse
	(*C2S)(nil),               // 17: C2S
	(*Thump)(nil),             // 18: Thump
	(*Bump)(nil),              // 19: Bump
	(*Connect)(nil),           // 20: Connect
	(*ChunkRequest)(nil),      // 21: ChunkRequest
	(*ChunkResponse)(nil),     // 22: ChunkResponse
	(*Execute)(nil),           // 23: Execute
	(*Reduce)(nil),            // 24: Reduce
	(*Results)(nil),           // 25: Results
	(*Report)(nil),            // 26: Report
	(*Beat)(nil),              // 27: Beat
	(*ReplicateRequest)(nil),  // 28: ReplicateRequest
	(*Replicate)(nil),         // 29: Replicate
	(*NodeCollapse)(nil),      // 30: NodeCollapse
	nil,                       // 31: RetrieveResponse.ChunksEntry
}
var file_dcs_proto_depIdxs = []int32{
	12, // 0: Wrapper.client_controller:type_name -> C2C
	17, // 1: Wrapper.client_storage:type_name -> C2S
	27, // 2: Wrapper.heart_beat:type_name -> Beat
	29, // 3: Wrapper.replicate:type_name -> Replicate
	30, // 4: Wrapper.node_collapse:type_name -> NodeCollapse
	28, // 5: Wrapper.replicate_request:type_name -> ReplicateRequest
	9,  // 6: Wrapper.delete:type_name -> Delete
	31, // 7: RetrieveResponse.chunks:type_name -> RetrieveResponse.ChunksEntry
	1,  // 8: ListNodesResponse.nodes:type_name -> NodeInfo
	3,  // 9: C2C.storage_request:type_name -> StorageRequest
	5,  // 10: C2C.retrieve_request:type_name -> RetrieveRequest
	4,  // 11: C2C.storage_response:type_name -> StorageResponse
	6,  // 12: C2C.retrieve_response:type_name -> RetrieveResponse
	7,  // 13: C2C.list_request:type_name -> ListRequest
	8,  // 14: C2C.list_files:type_name -> ListFiles
	10, // 15: C2C.list_nodes_request:type_name -> ListNodesRequest
	11, // 16: C2C.list_nodes_reponse:type_name -> ListNodesResponse
	13, // 17: C2S.put_request:type_name -> PutRequest
	15, // 18: C2S.get_request:type_name -> GetRequest
	14, // 19: C2S.put_response:type_name -> PutResponse
	16, // 20: C2S.get_response:type_name -> GetResponse
	18, // 21: Beat.thump_message:type_name -> Thump
	19, // 22: Beat.bump_message:type_name -> Bump
	20, // 23: Beat.connect_message:type_name -> Connect
	21, // 24: Beat.chunk_request:type_name -> ChunkRequest
	22, // 25: Beat.chunk_reponse:type_name -> ChunkResponse
	23, // 26: Beat.execute:type_name -> Execute
	24, // 27: Beat.reduce:type_name -> Reduce
	25, // 28: Beat.results:type_name -> Results
	26, // 29: Beat.report:type_name -> Report
	0,  // 30: RetrieveResponse.ChunksEntry.value:type_name -> ChunkInfo
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_dcs_proto_init() }
func file_dcs_proto_init() {
	if File_dcs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2C); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Execute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reduce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Beat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCollapse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dcs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Wrapper_ClientController)(nil),
		(*Wrapper_ClientStorage)(nil),
		(*Wrapper_HeartBeat)(nil),
		(*Wrapper_Replicate)(nil),
		(*Wrapper_NodeCollapse)(nil),
		(*Wrapper_ReplicateRequest)(nil),
		(*Wrapper_Delete)(nil),
	}
	file_dcs_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*C2C_StorageRequest)(nil),
		(*C2C_RetrieveRequest)(nil),
		(*C2C_StorageResponse)(nil),
		(*C2C_RetrieveResponse)(nil),
		(*C2C_ListRequest)(nil),
		(*C2C_ListFiles)(nil),
		(*C2C_ListNodesRequest)(nil),
		(*C2C_ListNodesReponse)(nil),
	}
	file_dcs_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*C2S_PutRequest)(nil),
		(*C2S_GetRequest)(nil),
		(*C2S_PutResponse)(nil),
		(*C2S_GetResponse)(nil),
	}
	file_dcs_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*Beat_ThumpMessage)(nil),
		(*Beat_BumpMessage)(nil),
		(*Beat_ConnectMessage)(nil),
		(*Beat_ChunkRequest)(nil),
		(*Beat_ChunkReponse)(nil),
		(*Beat_Execute)(nil),
		(*Beat_Reduce)(nil),
		(*Beat_Results)(nil),
		(*Beat_Report)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dcs_proto_goTypes,
		DependencyIndexes: file_dcs_proto_depIdxs,
		MessageInfos:      file_dcs_proto_msgTypes,
	}.Build()
	File_dcs_proto = out.File
	file_dcs_proto_rawDesc = nil
	file_dcs_proto_goTypes = nil
	file_dcs_proto_depIdxs = nil
}